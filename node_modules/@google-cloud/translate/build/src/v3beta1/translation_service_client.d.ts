/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, ClientOptions, LROperation } from 'google-gax';
import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
/**
 *  Provides natural language translation operations.
 * @class
 * @memberof v3beta1
 */
export declare class TranslationServiceClient {
    private _descriptors;
    private _innerApiCalls;
    private _pathTemplates;
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    operationsClient: gax.OperationsClient;
    translationServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of TranslationServiceClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     */
    static readonly servicePath: string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static readonly apiEndpoint: string;
    /**
     * The port for this API service.
     */
    static readonly port: number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static readonly scopes: string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    translateText(request: protosTypes.google.cloud.translation.v3beta1.ITranslateTextRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.translation.v3beta1.ITranslateTextResponse, (protosTypes.google.cloud.translation.v3beta1.ITranslateTextRequest | undefined), {} | undefined]>;
    translateText(request: protosTypes.google.cloud.translation.v3beta1.ITranslateTextRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.translation.v3beta1.ITranslateTextResponse, protosTypes.google.cloud.translation.v3beta1.ITranslateTextRequest | undefined, {} | undefined>): void;
    detectLanguage(request: protosTypes.google.cloud.translation.v3beta1.IDetectLanguageRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.translation.v3beta1.IDetectLanguageResponse, (protosTypes.google.cloud.translation.v3beta1.IDetectLanguageRequest | undefined), {} | undefined]>;
    detectLanguage(request: protosTypes.google.cloud.translation.v3beta1.IDetectLanguageRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.translation.v3beta1.IDetectLanguageResponse, protosTypes.google.cloud.translation.v3beta1.IDetectLanguageRequest | undefined, {} | undefined>): void;
    getSupportedLanguages(request: protosTypes.google.cloud.translation.v3beta1.IGetSupportedLanguagesRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.translation.v3beta1.ISupportedLanguages, (protosTypes.google.cloud.translation.v3beta1.IGetSupportedLanguagesRequest | undefined), {} | undefined]>;
    getSupportedLanguages(request: protosTypes.google.cloud.translation.v3beta1.IGetSupportedLanguagesRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.translation.v3beta1.ISupportedLanguages, protosTypes.google.cloud.translation.v3beta1.IGetSupportedLanguagesRequest | undefined, {} | undefined>): void;
    getGlossary(request: protosTypes.google.cloud.translation.v3beta1.IGetGlossaryRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.translation.v3beta1.IGlossary, (protosTypes.google.cloud.translation.v3beta1.IGetGlossaryRequest | undefined), {} | undefined]>;
    getGlossary(request: protosTypes.google.cloud.translation.v3beta1.IGetGlossaryRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.translation.v3beta1.IGlossary, protosTypes.google.cloud.translation.v3beta1.IGetGlossaryRequest | undefined, {} | undefined>): void;
    batchTranslateText(request: protosTypes.google.cloud.translation.v3beta1.IBatchTranslateTextRequest, options?: gax.CallOptions): Promise<[LROperation<protosTypes.google.cloud.translation.v3beta1.IBatchTranslateResponse, protosTypes.google.cloud.translation.v3beta1.IBatchTranslateMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchTranslateText(request: protosTypes.google.cloud.translation.v3beta1.IBatchTranslateTextRequest, options: gax.CallOptions, callback: Callback<LROperation<protosTypes.google.cloud.translation.v3beta1.IBatchTranslateResponse, protosTypes.google.cloud.translation.v3beta1.IBatchTranslateMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined>): void;
    createGlossary(request: protosTypes.google.cloud.translation.v3beta1.ICreateGlossaryRequest, options?: gax.CallOptions): Promise<[LROperation<protosTypes.google.cloud.translation.v3beta1.IGlossary, protosTypes.google.cloud.translation.v3beta1.ICreateGlossaryMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined]>;
    createGlossary(request: protosTypes.google.cloud.translation.v3beta1.ICreateGlossaryRequest, options: gax.CallOptions, callback: Callback<LROperation<protosTypes.google.cloud.translation.v3beta1.IGlossary, protosTypes.google.cloud.translation.v3beta1.ICreateGlossaryMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined>): void;
    deleteGlossary(request: protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryRequest, options?: gax.CallOptions): Promise<[LROperation<protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryResponse, protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined]>;
    deleteGlossary(request: protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryRequest, options: gax.CallOptions, callback: Callback<LROperation<protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryResponse, protosTypes.google.cloud.translation.v3beta1.IDeleteGlossaryMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined>): void;
    listGlossaries(request: protosTypes.google.cloud.translation.v3beta1.IListGlossariesRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.translation.v3beta1.IGlossary[], protosTypes.google.cloud.translation.v3beta1.IListGlossariesRequest | null, protosTypes.google.cloud.translation.v3beta1.IListGlossariesResponse]>;
    listGlossaries(request: protosTypes.google.cloud.translation.v3beta1.IListGlossariesRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.translation.v3beta1.IGlossary[], protosTypes.google.cloud.translation.v3beta1.IListGlossariesRequest | null, protosTypes.google.cloud.translation.v3beta1.IListGlossariesResponse>): void;
    /**
     * Equivalent to {@link listGlossaries}, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listGlossaries} continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the project from which to list all of the glossaries.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. The server may return fewer glossaries than
     *   requested. If unspecified, the server picks an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results the server should return.
     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]
     *   returned from the previous call to `ListGlossaries` method.
     *   The first page is returned if `page_token`is empty or missing.
     * @param {string} [request.filter]
     *   Optional. Filter specifying constraints of a list operation.
     *   Filtering is not supported yet, and the parameter currently has no effect.
     *   If missing, no filtering is performed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary} on 'data' event.
     */
    listGlossariesStream(request?: protosTypes.google.cloud.translation.v3beta1.IListGlossariesRequest, options?: gax.CallOptions): Transform;
    /**
     * Return a fully-qualified glossary resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} glossary
     * @returns {string} Resource name string.
     */
    glossaryPath(project: string, location: string, glossary: string): string;
    /**
     * Parse the project from Glossary resource.
     *
     * @param {string} glossaryName
     *   A fully-qualified path representing Glossary resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGlossaryName(glossaryName: string): string;
    /**
     * Parse the location from Glossary resource.
     *
     * @param {string} glossaryName
     *   A fully-qualified path representing Glossary resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGlossaryName(glossaryName: string): string;
    /**
     * Parse the glossary from Glossary resource.
     *
     * @param {string} glossaryName
     *   A fully-qualified path representing Glossary resource.
     * @returns {string} A string representing the glossary.
     */
    matchGlossaryFromGlossaryName(glossaryName: string): string;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string;
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close(): Promise<void>;
}
